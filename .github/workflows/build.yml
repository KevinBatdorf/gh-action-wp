name: Build And Test
on: [push, pull_request]
jobs:
  plugin:
    name: Plugin (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [7.3]
        wp: [5.5]
    services:
      nginx:
        image: nginx
        options: -v /usr/src/wordpress:/usr/share/nginx/html --name nginx
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: wp_cli_test
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Check existence of composer.json file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "composer.json"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php }}'
          extensions: mysql, zip
          coverage: none
          tools: composer

      - name: Get Composer cache Directory
        if: steps.check_files.outputs.files_exists == 'true'
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Use Composer cache
        if: steps.check_files.outputs.files_exists == 'true'
        uses: actions/cache@master
        with:
          path: ${{ steps['composer-cache'].outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        if: steps.check_files.outputs.files_exists == 'true'
        run: COMPOSER_ROOT_VERSION=dev-master composer install --prefer-dist --no-progress --no-suggest

      - name: Start MySQL server
        run: sudo service mysql start

      - name: Prepare test database
        run: |
          export MYQSL_HOST=127.0.0.1
          export MYSQL_TCP_PORT=${{ job.services.mysql.ports['3306'] }}
          mysql -e 'CREATE DATABASE IF NOT EXISTS wp_cli_test;' -uroot -proot
          mysql -e 'GRANT ALL PRIVILEGES ON wp_cli_test.* TO "wp_cli_test"@"127.0.0.1" IDENTIFIED BY "password1"' -uroot -proot
          mysql -e 'GRANT ALL PRIVILEGES ON wp_cli_test_scaffold.* TO "wp_cli_test"@"127.0.0.1" IDENTIFIED BY "password1"' -uroot -proot

      - name: Install WP-CLI
        uses: wei/curl@v1
        with:
          args: -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
      - run: |
          sudo chmod +x wp-cli.phar && mv wp-cli.phar /usr/local/bin/wp && wp --info

      - name: Install WordPress
        run: |
          sudo mkdir -p /usr/src/wordpress/
          sudo chmod o+w /usr/src/wordpress/
          cd /usr/src/wordpress/
          wp core download --version=${{ env.WP_VERSION }}
          wp config create --dbname=wp_cli_test --dbuser=root --dbpass=root --allow-root --debug
          wp core install --url=http://localhost:8080 --title=Test --admin_user=wordpress --admin_password=wordpress \
            --admin_email=admin@local.test --skip-email --allow-root
          cd /github/workspace
          cp -R /github/workspace /usr/src/wordpress/wp-content/plugins/metagallery
          la -l
          la -l /usr/src/wordpress/wp-content/plugins/metagallery
        env:
          WP_VERSION: ${{ matrix.wp }}
      - name: Restart nginx
        uses: docker://docker
        with:
          args: docker restart nginx
